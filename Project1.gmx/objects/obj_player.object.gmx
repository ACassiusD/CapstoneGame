<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.8;
hsp = 0;
vsp = 0;
jumpspeed = 12;
movespeed = 10;
fric = 1;

jump_number     = 2; //How many jumps the player can make
jump_current    = 0; //How many jumps the player has remaining
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> //Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);
 
//Find weather player is moving left or right based on the key pressed
move = key_left + key_right;

//Horizontal speed = direction * movespeed
hsp = move * movespeed;

//If verticle speed is less than 10 pixle/frame downwards speed, increase gravity until
//it its that.
if (vsp &lt; 10) vsp += grav;
 
//If player is 1 frame above wall, on this frame.
//Jump number refreshes
if (place_meeting(x,y+1,obj_wall))
{
    jump_number = 2;

}

if(keyboard_check_pressed(vk_space) &amp;&amp; jump_current &gt; 0)
{    
    vsp = -jumpspeed
    jump_current--; 
}

//If player will hit wall on next frame
if (place_meeting(x+hsp,y,obj_wall))
{
    //Move player closer to wall pixle by pixle until it reaches it
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
    
    //If not touching the ground, add friction to vsp to slide down walls
    if(!place_meeting(x,y+1,obj_wall))
    {
        if(jump_current &lt; 1)
        {
            jump_current = 1;
        }
        vsp = key_jump * -jumpspeed
        vsp += fric
    }    
    
}
x += hsp;
 
//If the player is about to hit the top or bottom of a wall
if (place_meeting(x,y+vsp,obj_wall))
{
    //Move as close to wall as possible
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    
    if(vsp &gt; 0)
    {
        jump_current = jump_number;
    }
 
    vsp = 0;
}
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
